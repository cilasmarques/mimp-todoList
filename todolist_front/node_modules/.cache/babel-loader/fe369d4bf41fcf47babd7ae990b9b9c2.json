{"ast":null,"code":"import axios from 'axios';\nlet token;\nconst Api = axios.create({\n  baseURL: 'http://localhost:5000'\n});\nApi.interceptors.request.use(async config => {\n  token = localStorage.getItem('userToken');\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\nApi.interceptors.response.use(res => res, error => {\n  //        token && handleError(error);\n  if (error.message === \"Network Error\") {\n    error = {\n      response: {\n        data: {\n          errors: {}\n        },\n        status: 500\n      }\n    };\n  }\n\n  return Promise.reject(error);\n});\nexport default Api;","map":{"version":3,"sources":["/home/cilada/workspace/todolist/todolist_front/src/api.js"],"names":["axios","token","Api","create","baseURL","interceptors","request","use","config","localStorage","getItem","headers","Authorization","response","res","error","message","data","errors","status","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAJ;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAb,CAAZ;AAIAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,MAAMC,MAAN,IAAgB;AACzCP,EAAAA,KAAK,GAAGQ,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAR;;AACA,MAAIT,KAAJ,EAAW;AACPO,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAAgC,UAASX,KAAM,EAA/C;AACH;;AACD,SAAOO,MAAP;AACH,CAND;AAQAN,GAAG,CAACG,YAAJ,CAAiBQ,QAAjB,CAA0BN,GAA1B,CACIO,GAAG,IAAIA,GADX,EAEIC,KAAK,IAAI;AACb;AACQ,MAAIA,KAAK,CAACC,OAAN,KAAkB,eAAtB,EAAuC;AACnCD,IAAAA,KAAK,GAAG;AAACF,MAAAA,QAAQ,EAAE;AAACI,QAAAA,IAAI,EAAE;AAACC,UAAAA,MAAM,EAAE;AAAT,SAAP;AAAsBC,QAAAA,MAAM,EAAC;AAA7B;AAAX,KAAR;AACH;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeN,KAAf,CAAP;AACH,CARL;AAWA,eAAeb,GAAf","sourcesContent":["import axios from 'axios';\n\nlet token;\n\nconst Api = axios.create({\n    baseURL: 'http://localhost:5000'\n});\n\nApi.interceptors.request.use(async config => {\n    token = localStorage.getItem('userToken');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n});\n\nApi.interceptors.response.use(\n    res => res,\n    error => {\n//        token && handleError(error);\n        if (error.message === \"Network Error\") {\n            error = {response: {data: {errors: {} }, status:500 }}\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport default Api;"]},"metadata":{},"sourceType":"module"}